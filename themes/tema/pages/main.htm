url="/"
layout="layout1"
==
<?php 
    function onStart() {
        $this["domain"] = $_SERVER['SERVER_NAME'];
        return;
    }
?>
==
<section>
    <div class="mnogo">
        <div class="ecs">
            <img src="{{ " assets/images/чучутьлес.jpeg" | theme }}" alt="">
            <h3>
                <b>ПолетКарта</b> - это инновационное решение, которое поможет каждому безопасно, с наивысшей точностью
                отследить перемещение вашего беспилотного летательного аппарата вне зависимости от его модели,
                массы и размера.
            </h3>
        </div>
        <div class="les">
            <img src="{{ " assets/images/лес.jpeg" | theme }}" alt="">
        </div>
    </div>
</section>

<div class="container">
    <div class="content">
        <div class="weather">
            {% partial 'weather' %}
        </div>
        <select id="geojson-select">
            <option value="map1.geojson">Файл 1</option>
            <option value="map2.geojson">Файл 2</option>
        </select>
        <div id="map" class="map" style="height:1000px"></div>
    </div>

    <script src="https://api-maps.yandex.ru/2.1/?lang=ru_RU" type="text/javascript"></script>
    <script>
        ymaps.ready(init);

        function loadGeoJSON(fileName) {
            fetch("{{ 'assets/' | theme }}/" + fileName)
                .then(response => response.json())
                .then(data => {
                    data.features.forEach(feature => {
                        const { geometry, properties } = feature;
                        if (geometry.type === 'Polygon') {
                            const coordinates = geometry.coordinates[0].map(coord => [coord[1], coord[0]]);
                            const polygon = new ymaps.Polygon([coordinates], {
                                hintContent: properties.description
                            }, {
                                fillColor: properties.fill,
                                fillOpacity: properties['fill-opacity'],
                                strokeColor: properties.stroke,
                                strokeOpacity: properties['stroke-opacity'],
                                strokeWidth: properties['stroke-width']
                            });
                            window.myGeoObjects.add(polygon);
                        } else if (geometry.type === 'Point') {
                            const point = geometry.coordinates;
                            const placemark = new ymaps.Placemark([point[1], point[0]], {
                                hintContent: properties.description,
                                iconCaption: properties.iconCaption
                            }, {
                                preset: 'islands#blueDotIconWithCaption',
                                iconColor: properties['marker-color']
                            });
                            window.myGeoObjects.add(placemark);
                        }
                    });
                    window.map.geoObjects.add(window.myGeoObjects);
                    window.map.setBounds(window.myGeoObjects.getBounds());
                })
                .catch(error => console.error('Ошибка при загрузке GeoJSON:', error));
        }

        function init() {
            window.map = new ymaps.Map("map", {
                center: [50.2906, 127.5272], // Центр карты Благовещенск
                zoom: 10
            });
            window.myGeoObjects = new ymaps.GeoObjectCollection({}, {
                preset: "islands#redCircleIcon",
                strokeWidth: 4,
                geodesic: true
            });

            document.getElementById('geojson-select').addEventListener('change', function () {
                loadGeoJSON(this.value);
            });

            loadGeoJSON(document.getElementById('geojson-select').value);

            // Подключение к WebSocket-серверу
            const socket = new WebSocket('wss://{{ domain }}/map');
            const userMarkers = {};
            const userTimers = {};
            let currentPosition = null;

            // Создание метки для пользователя
            let userLocation;

            function sendCoordinates(coords) {
                const message = JSON.stringify({
                    type: 'coordinates',
                    latitude: coords[0],
                    longitude: coords[1]
                });
                socket.send(message);
            }

            function startRemoveTimer(userId) {
                if (userTimers[userId]) {
                    clearTimeout(userTimers[userId]);
                }
                userTimers[userId] = setTimeout(() => {
                    if (userMarkers[userId]) {
                        window.map.geoObjects.remove(userMarkers[userId]);
                        delete userMarkers[userId];
                        delete userTimers[userId];
                    }
                }, 30000); // 30 секунд
            }

            socket.onmessage = function (event) {
                const data = JSON.parse(event.data);
                if (data.type === 'coordinates') {
                    const { userId, latitude, longitude } = data;
                    const userCoordinates = [latitude, longitude];

                    if (!userMarkers[userId]) {
                        const marker = new ymaps.Placemark(userCoordinates, {
                            hintContent: "Пользователь " + userId
                        }, {
                            preset: 'islands#blueCircleDotIconWithCaption',
                            iconCaptionMaxWidth: '50'
                        });
                        window.map.geoObjects.add(marker);
                        userMarkers[userId] = marker;
                    } else {
                        userMarkers[userId].geometry.setCoordinates(userCoordinates);
                    }

                    startRemoveTimer(userId);
                }
            };

            if (navigator.geolocation) {
                navigator.geolocation.watchPosition(position => {
                    const { latitude, longitude } = position.coords;
                    const userCoordinates = [latitude, longitude];
                    currentPosition = userCoordinates;

                    if (!userLocation) {
                        userLocation = new ymaps.Placemark(userCoordinates, {
                            hintContent: "Вы здесь"
                        }, {
                            preset: 'islands#redCircleDotIconWithCaption',
                            iconCaptionMaxWidth: '50'
                        });
                        window.map.geoObjects.add(userLocation);
                    } else {
                        userLocation.geometry.setCoordinates(userCoordinates);
                    }

                    sendCoordinates(userCoordinates);
                }, error => {
                    console.error("Ошибка при определении местоположения: ", error);
                }, {
                    enableHighAccuracy: true,
                    maximumAge: 0,
                    timeout: 5000
                });

                setInterval(() => {
                    if (currentPosition) {
                        sendCoordinates(currentPosition);
                    }
                }, 15000);
            } else {
                console.error("Геолокация не поддерживается вашим браузером.");
            }
        }
    </script>
</div>